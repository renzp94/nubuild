import fs from 'node:fs'
import path from 'node:path'
import type { BunPlugin } from 'bun'
import {
  type CompilationOptions,
  type EntryPointConfig,
  generateDtsBundle,
} from 'dts-bundle-generator'
import { getTsconfig } from 'get-tsconfig'

export type DtsOptions = Omit<EntryPointConfig, 'filePath'> & {
  onEnd?: (dtsFilePaths: DtsBuildArtifact[]) => void
  compilationOptions?: CompilationOptions
}

export interface DtsBuildArtifact {
  path: string
}

const PluginDts = (options?: DtsOptions): BunPlugin => {
  return {
    name: 'nubuild:dts',
    async setup(build) {
      const { compilationOptions, onEnd, ...restOptions } = options ?? {}

      const entries = build.config.entrypoints.map((entry) => {
        return {
          filePath: entry,
          ...restOptions,
        }
      })

      const tsconfig =
        compilationOptions?.preferredConfigPath ?? getTsconfig()?.path
      const result = generateDtsBundle(entries, {
        ...compilationOptions,
        preferredConfigPath: tsconfig,
      })

      const outDir = build.config.outdir ?? 'dist'
      if (!fs.existsSync(outDir)) {
        fs.mkdirSync(outDir)
      }

      const dtsFiles: DtsBuildArtifact[] = build.config.entrypoints.map(
        (entry) => {
          const filepath = path.join(
            process.cwd(),
            outDir,
            entry.replace(/^.*\//, '').replace(/\.[jt]s$/, '.d.ts'),
          )
          return {
            path: filepath,
          }
        },
      )

      await Promise.all(
        dtsFiles.map((dtsFile, index) => {
          const content = result[index]
            .replace(
              /\/\/ Generated by dts-bundle-generator v[0-9].[0-9].[0-9]\n\n/,
              '',
            )
            .replace('\nexport {};\n', '')

          return Bun.write(dtsFile.path, content)
        }),
      )

      onEnd?.(dtsFiles)
    },
  }
}

export default PluginDts
